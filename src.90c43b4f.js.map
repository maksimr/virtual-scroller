{"version":3,"sources":["node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","lib/scrollbar.js","lib/size-manager.js","lib/resize-observer.js","lib/virtual-scroller.js","src/index.js"],"names":["Scrollbar","viewportElement","params","scrollPosition","scrollElement","findScrollableElement","scrollListenElement","document","documentElement","window","scrollListener","horizontal","viewportSize","clientWidth","clientHeight","maxScrollSize","Math","round","calcMaxBrowserScrollSize","currentPage","prevViewportScrollPosition","currentPageOffset","runwayElement","createElement","style","width","height","scrollSize","position","visibility","overflow","updateTotalSize","totalSize","getComputedStyle","firstChild","insertBefore","appendChild","addScrollListener","scrollTo","viewportScrollTop","getViewportScrollPosition","abs","onJump","onSmoothScroll","updateScrollPosition","max","browserScrollPosition","getOffsetBetweenScrollElementAndViewport","findOffsetBetween","viewportScrollPosition","offset","arguments","length","scrollTop","pageSize","scrollToNextPage","scrollToPrevPage","scrollOnPage","pageNumber","floor","setCurrentPage","prevPage","viewportScrollTo","overlapSize","onScroll","bind","addEventListener","removeEventListener","pageCount","ceil","prevOverlapSize","scrollPage","removeChild","removeScrollListener","bigNumber","div","left","top","body","size","getBoundingClientRect","parseInt","element","parentNode","boundingClientRect","boundingClientRectDocument","offsetTop","offsetLeft","DEFAULT_HEIGHT_ESTIMATE_PX","SizeManager","reset","sizes","has","oldSize","get","undefined","measuredCount","newSize","offsetWidth","offsetHeight","totalMeasuredSize","set","getAverageSize","delete","WeakMap","addResizeListener","listener","options","passive","capture","resizeObserver","createResizeObserver","queueMicrotask","setupTriggers","event","prevElementHeight","prevElementWidth","currentTarget","growObserver","shrinkObserver","lastChild","growObserverOffsetHeight","growObserverOffsetWidth","growObserverScrollHeight","scrollHeight","growObserverScrollWidth","scrollWidth","shrinkObserverScrollHeight","shrinkObserverScrollWidth","setupScrollPosition","scrollLeft","setAttribute","cloneNode","callback","Promise","resolve","then","catch","e","setTimeout","VirtualScroller","itemCount","onRemoveItem","itemBuilder","bufferSize","hasOwnProperty","sizeManager","builder","expectedItemSize","itemSize","expectedTotalSize","rendered","range","start","end","prevScrollTop","throttleTime","scrollbar","scheduleSync","clearTimeout","scrollThrottlingId","syncId","requestAnimationFrame","sync","render","createRangeForCurrentPosition","startOffset","endOffset","i","getHopefulSize","averageItemSize","startElement","endElement","maxIndex","min","firstVisibleItemIndex","findFirstVisibleItemIndex","addedElements","documentFragment","createDocumentFragment","newElement","push","forEach","remove","measure","renderedElement","positionElement","scrollCorrection","offsetMismatch","maxScrollTop","checkRange","index","Object","keys","find","Number","item","String","calc","destroy","cancelAnimationFrame","value","main","JSON","parse","decodeURIComponent","location","search","slice","count","appElement","getElementById","assign","it","padding","innerHTML"],"mappings":"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","file":"src.90c43b4f.js","sourceRoot":"..","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","export class Scrollbar {\n  /**\n   * @typedef {{totalSize: number, scrollListener: function(...[*]=), horizontal: boolean=, scrollPosition: number=}} ScrollbarParams\n   */\n  /**\n   * @param {Element} viewportElement\n   * @param {ScrollbarParams} params\n   * @return {Scrollbar}\n   */\n  static builder(viewportElement, params) {\n    return new Scrollbar(viewportElement, params);\n  }\n\n  /**\n   * @param {Element} viewportElement\n   * @param {ScrollbarParams} params\n   */\n  constructor(viewportElement, params) {\n    /**\n     * @public\n     * @type number\n     */\n    this.scrollPosition = 0;\n\n    /**\n     * @private\n     * @type Element\n     */\n    this.viewportElement = viewportElement;\n    /**\n     * @private\n     * @type Element\n     */\n    this.scrollElement = findScrollableElement(this.viewportElement);\n    /**\n     * @private\n     * @type Element\n     */\n    this.scrollListenElement = this.scrollElement === document.documentElement ? window : this.scrollElement;\n    /**\n     * @private\n     * @type function()\n     */\n    this.scrollListener = params.scrollListener;\n    /**\n     * @private\n     * @type boolean\n     */\n    this.horizontal = params.horizontal;\n    /**\n     * @public\n     * @type number\n     */\n    this.viewportSize = this.horizontal ? this.scrollElement.clientWidth : this.scrollElement.clientHeight;\n    /**\n     * Divide on 2 because it's too performance consuming and complicated handle case when offset between\n     * scroll node and viewport is changed dynamically we should also change max browser scroll size too.\n     * And Chrome works significantly slower and janky when you have a scrollbar with maximal height\n     * @private\n     * @type {number}\n     */\n    this.maxScrollSize = Math.round(calcMaxBrowserScrollSize(this.horizontal) / 2);\n\n    /**\n     * @private\n     * @type number\n     */\n    this.currentPage = 0;\n    /**\n     * @private\n     * @type number\n     */\n    this.prevViewportScrollPosition = 0;\n\n    /**\n     * @private\n     * @type number\n     */\n    this.currentPageOffset = 0;\n\n    /**\n     * @private\n     * @type Element\n     */\n    this.runwayElement = document.createElement('div');\n    this.runwayElement.style.width = this.runwayElement.style.height = '1px';\n    this.runwayElement.style[this.horizontal ? 'width' : 'height'] = this.scrollSize + 'px';\n    this.runwayElement.style.position = 'relative';\n    this.runwayElement.style.visibility = 'hidden';\n    this.runwayElement.style.overflow = 'hidden';\n\n    this.updateTotalSize(params.totalSize || 0);\n\n    if (window.getComputedStyle(this.viewportElement).position === 'static') {\n      this.viewportElement.style.position = 'relative';\n    }\n\n    if (this.viewportElement.firstChild) {\n      this.viewportElement.insertBefore(this.runwayElement, this.viewportElement.firstChild);\n    } else {\n      this.viewportElement.appendChild(this.runwayElement);\n    }\n\n    this.addScrollListener();\n\n    if (params.scrollPosition) {\n      this.scrollTo(params.scrollPosition);\n    }\n  }\n\n  /**\n   * @private\n   */\n  onScroll() {\n    const viewportScrollTop = this.getViewportScrollPosition();\n    if (Math.abs(viewportScrollTop - this.prevViewportScrollPosition) > this.viewportSize) {\n      this.onJump();\n    } else {\n      this.onSmoothScroll();\n    }\n\n    this.prevViewportScrollPosition = this.getViewportScrollPosition();\n    this.updateScrollPosition(this.getViewportScrollPosition() + this.currentPageOffset);\n    this.scrollListener();\n  }\n\n  /**\n   * @private\n   * @param {number} scrollPosition\n   */\n  updateScrollPosition(scrollPosition) {\n    this.scrollPosition = Math.max(scrollPosition, 0);\n  }\n\n  /**\n   * @private\n   * @return {number}\n   */\n  getViewportScrollPosition() {\n    return Math.max(this.browserScrollPosition() - this.getOffsetBetweenScrollElementAndViewport(), 0);\n  }\n\n  /**\n   * @private\n   * @return {number}\n   */\n  getOffsetBetweenScrollElementAndViewport() {\n    return this.scrollElement !== this.viewportElement ? findOffsetBetween(this.viewportElement, this.scrollElement, this.horizontal) : 0;\n  }\n\n  /**\n   * @private\n   * @param {number} viewportScrollPosition\n   * @return {number}\n   */\n  viewportScrollTo(viewportScrollPosition) {\n    const offset = this.getOffsetBetweenScrollElementAndViewport();\n    return this.browserScrollPosition(viewportScrollPosition + offset);\n  }\n\n  /**\n   * @param {number=} scrollPosition\n   * @return {number}\n   */\n  browserScrollPosition(scrollPosition) {\n    if (!arguments.length) {\n      return this.scrollElement.scrollTop;\n    }\n    this.scrollElement.scrollTop = scrollPosition;\n  }\n\n  /**\n   * @private\n   */\n  onSmoothScroll() {\n    const scrollPosition = this.getViewportScrollPosition();\n\n    if (scrollPosition + this.currentPageOffset > (this.currentPage + 1) * this.pageSize) {\n      this.scrollToNextPage();\n    } else if (this.currentPage && (scrollPosition + this.currentPageOffset) < this.currentPage * this.pageSize) {\n      this.scrollToPrevPage();\n    }\n  }\n\n  /**\n   * @private\n   */\n  scrollToNextPage() {\n    this.scrollOnPage(this.currentPage + 1);\n  }\n\n  /**\n   * @private\n   */\n  scrollToPrevPage() {\n    this.scrollOnPage(this.currentPage - 1);\n  }\n\n  /**\n   * @private\n   */\n  onJump() {\n    const viewportScrollPosition = this.getViewportScrollPosition();\n    // convert actual pixels to total pixels\n    const scrollPosition = viewportScrollPosition * ((this.totalSize - this.viewportSize) / (this.scrollSize - this.viewportSize));\n    const pageNumber = Math.floor(scrollPosition / this.pageSize);\n    this.setCurrentPage(pageNumber);\n  }\n\n  /**\n   * @private\n   * @param {number} currentPage\n   */\n  scrollOnPage(currentPage) {\n    const prevPage = this.currentPage;\n    if (prevPage < currentPage) {\n      this.viewportScrollTo(this.getViewportScrollPosition() - this.overlapSize);\n    } else if (prevPage > currentPage) {\n      this.viewportScrollTo(this.getViewportScrollPosition() + this.overlapSize);\n    }\n    this.setCurrentPage(currentPage);\n  }\n\n  /**\n   * @private\n   * @param {number} currentPage\n   */\n  setCurrentPage(currentPage) {\n    if (currentPage !== this.currentPage) {\n      this.currentPage = Math.max(currentPage, 0);\n      this.currentPageOffset = Math.round(this.currentPage * this.overlapSize);\n    }\n  }\n\n  /**\n   * @private\n   */\n  addScrollListener() {\n    /**\n     * @private\n     */\n    this.onScroll = this.onScroll.bind(this);\n    this.scrollListenElement.addEventListener('scroll', this.onScroll);\n  }\n\n  /**\n   * @private\n   */\n  removeScrollListener() {\n    this.scrollListenElement.removeEventListener('scroll', this.onScroll);\n  }\n\n  /**\n   * @public\n   * @param {number} totalSize\n   */\n  updateTotalSize(totalSize) {\n    if (this.totalSize === totalSize) {\n      return;\n    }\n\n    /**\n     * @public\n     * @type {number}\n     */\n    this.totalSize = totalSize;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scrollSize = this.maxScrollSize > this.totalSize ? this.totalSize : this.maxScrollSize;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pageSize = Math.floor(this.maxScrollSize / 100);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pageCount = Math.ceil(this.totalSize / this.pageSize);\n\n    const prevOverlapSize = this.overlapSize;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.overlapSize = this.totalSize > this.maxScrollSize ? (this.totalSize - this.maxScrollSize) / (this.pageCount - 1) : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.currentPageOffset = Math.round(this.currentPage * this.overlapSize);\n\n    this.runwayElement.style[this.horizontal ? 'width' : 'height'] = this.scrollSize + 'px';\n\n    if (this.scrollPosition > (this.totalSize - this.viewportSize)) {\n      this.updateScrollPosition(this.totalSize - this.viewportSize);\n    }\n\n    // If we on the last page and user has updated totalSize\n    // we should check overlap size and if new overlap size is\n    // bigger than previous we should remove this difference by\n    // jumping back on this size otherwise it can lead to the problem\n    // that we have reach the bottom and can not scroll future but\n    // totalSize say that we should have scroll possibility\n    if (\n      this.currentPage === this.pageCount - 1 &&\n      prevOverlapSize &&\n      prevOverlapSize < this.overlapSize) {\n      this.prevViewportScrollPosition = this.viewportScrollTo(this.prevViewportScrollPosition - this.currentPage * (this.overlapSize - prevOverlapSize));\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * @public\n   * @param {number} scrollPosition\n   */\n  scrollTo(scrollPosition) {\n    if (this.scrollPosition !== scrollPosition) {\n      this.updateScrollPosition(scrollPosition);\n      const scrollPage = Math.floor(scrollPosition / this.pageSize);\n      this.setCurrentPage(scrollPage);\n      this.prevViewportScrollPosition = this.viewportScrollTo(scrollPosition - this.currentPageOffset);\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * @public\n   * Calculate actual position on viewport for passed scrollbar position\n   * @param {number} position\n   * @return {number}\n   */\n  calc(position) {\n    return position - this.currentPageOffset;\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * @public\n   */\n  destroy() {\n    this.viewportElement.removeChild(this.runwayElement);\n    this.removeScrollListener();\n  }\n}\n\n/**\n * @param {boolean=} horizontal\n * @return {number}\n */\nexport function calcMaxBrowserScrollSize(horizontal) {\n  const bigNumber = '9999999999999999px';\n  const div = document.createElement('div');\n  const style = div.style;\n  style.position = 'absolute';\n  style.left = bigNumber;\n  style.top = bigNumber;\n  document.body.appendChild(div);\n\n  const size = div.getBoundingClientRect()[horizontal ? 'left' : 'top'] || parseInt(bigNumber);\n  document.body.removeChild(div);\n  return Math.abs(size);\n}\n\n/**\n * @param {Element|Node} element\n * @return {Element}\n */\nexport function findScrollableElement(element) {\n  while (element.parentNode && element.parentNode !== document) {\n    const overflow = window.getComputedStyle(element).overflow;\n    if (overflow === 'visible' || overflow === '') {\n      element = element.parentNode;\n      continue;\n    }\n    break;\n  }\n  return element;\n}\n\n/**\n * @param {(Element|HTMLElement|Node)} element\n * @param {(Element|HTMLElement|Node)} scrollElement\n * @param {boolean=} horizontal\n * @return {number}\n */\nfunction findOffsetBetween(element, scrollElement, horizontal = false) {\n  // If scrollElement is documentElement we can\n  // calculate it by getBoundingClientRect and dont traverse all parents\n  if (scrollElement === document.documentElement) {\n    const boundingClientRect = element.getBoundingClientRect();\n    const boundingClientRectDocument = scrollElement.getBoundingClientRect();\n    return horizontal ?\n      boundingClientRect.left - boundingClientRectDocument.left :\n      boundingClientRect.top - boundingClientRectDocument.top;\n  }\n\n  let offset = 0;\n  while (element && element.parentNode && element !== scrollElement) {\n    // noinspection JSValidateTypes\n    /**\n     * @type {HTMLElement}\n     */\n    const parentNode = element.parentNode;\n    const offsetTop = horizontal ? element.offsetLeft : element.offsetTop;\n    offset = (window.getComputedStyle(parentNode).position !== 'static') ?\n      offset + offsetTop :\n      offset + (offsetTop - (horizontal ? parentNode.offsetLeft : parentNode.offsetTop));\n    element = parentNode;\n  }\n  return offset;\n}","const DEFAULT_HEIGHT_ESTIMATE_PX = 50;\n\nexport class SizeManager {\n  /**\n   * @param {boolean=} horizontal\n   * @returns {SizeManager}\n   */\n  static builder(horizontal = false) {\n    return new SizeManager(horizontal);\n  }\n\n  /**\n   * @param {boolean} horizontal\n   */\n  constructor(horizontal) {\n    this.horizontal = horizontal;\n    this.reset();\n  }\n\n  /**\n   * @param {!HTMLElement} element The element to measure.\n   * @return {boolean}\n   */\n  has(element) {\n    return this.sizes.has(element);\n  }\n\n  /**\n   * Measures and stores |element|'s size. If |element| was measured\n   * previously, this updates everything to use the new current size.\n   * @param {!HTMLElement} element The element to measure.\n   */\n  measure(element) {\n    let oldSize = this.sizes.get(element);\n    if (oldSize === undefined) {\n      oldSize = 0;\n      this.measuredCount++;\n    }\n    const newSize = this.horizontal ? element.offsetWidth : element.offsetHeight;\n    this.totalMeasuredSize += newSize - oldSize;\n    this.sizes.set(element, newSize);\n  }\n\n  /**\n   * Returns a size for |element|, either the last stored size or an\n   * estimate based on all other previously measured elements or a\n   * default.\n   * @param {!HTMLElement} element The element to produce a size for.\n   * @return {number}\n   */\n  getHopefulSize(element) {\n    const size = this.sizes.get(element);\n    return size === undefined ? this.getAverageSize() : size;\n  }\n\n  getAverageSize() {\n    return this.measuredCount > 0 ?\n      this.totalMeasuredSize / this.measuredCount :\n      DEFAULT_HEIGHT_ESTIMATE_PX;\n  }\n\n  /**\n   * Removes all data related to |element| from the manager.\n   * @param {!HTMLElement} element The element to remove.\n   */\n  remove(element) {\n    const oldSize = this.sizes.get(element);\n    if (oldSize === undefined) {\n      return;\n    }\n    this.totalMeasuredSize -= oldSize;\n    this.measuredCount--;\n    this.sizes.delete(element);\n  }\n\n  reset() {\n    this.sizes = new WeakMap();\n    this.totalMeasuredSize = 0;\n    this.measuredCount = 0;\n  }\n}\n","/**\n * @param {HTMLElement} element\n * @param {function} listener\n * @return {function(...[*]=)} Remove listener function\n */\nexport function addResizeListener(element, listener) {\n  const options = {passive: true, capture: true};\n  const resizeObserver = createResizeObserver();\n\n  if (element.style.position === 'static') {\n    element.style.position = 'relative';\n  }\n\n  element.appendChild(resizeObserver);\n  resizeObserver.addEventListener('scroll', onScroll, options);\n\n  // Postpone calculation to avoid \"Layout Thrashing\"\n  queueMicrotask(() => setupTriggers(resizeObserver));\n\n  return () => {\n    resizeObserver.removeEventListener('scroll', onScroll, options);\n    element.removeChild(resizeObserver);\n  };\n\n  function onScroll(event) {\n    if (\n      onScroll.prevElementHeight !== element.offsetHeight ||\n      onScroll.prevElementWidth !== element.offsetWidth) {\n      onScroll.prevElementHeight = element.offsetHeight;\n      onScroll.prevElementWidth = element.offsetWidth;\n      const resizeObserver = event.currentTarget;\n      setupTriggers(resizeObserver);\n      listener(element);\n    }\n  }\n}\n\n/**\n * @param {Node} resizeObserver\n */\nfunction setupTriggers(resizeObserver) {\n  const growObserver = resizeObserver.firstChild;\n  const shrinkObserver = resizeObserver.lastChild;\n  const growObserverOffsetHeight = growObserver.offsetHeight;\n  const growObserverOffsetWidth = growObserver.offsetWidth;\n  const growObserverScrollHeight = growObserver.scrollHeight;\n  const growObserverScrollWidth = growObserver.scrollWidth;\n  const shrinkObserverScrollHeight = shrinkObserver.scrollHeight;\n  const shrinkObserverScrollWidth = shrinkObserver.scrollWidth;\n\n  queueMicrotask(() => {\n    growObserver.firstChild.style.height = growObserverOffsetHeight + 1 + 'px';\n    growObserver.firstChild.style.width = growObserverOffsetWidth + 1 + 'px';\n    queueMicrotask(setupScrollPosition);\n  });\n\n  function setupScrollPosition() {\n    growObserver.scrollTop = growObserverScrollHeight;\n    growObserver.scrollLeft = growObserverScrollWidth;\n    shrinkObserver.scrollTop = shrinkObserverScrollHeight;\n    shrinkObserver.scrollLeft = shrinkObserverScrollWidth;\n  }\n}\n\n/**\n * @return {Node}\n */\nfunction createResizeObserver() {\n  if (!createResizeObserver.resizeObserver) {\n    const resizeObserver = document.createElement('div');\n    const growObserver = document.createElement('div');\n    const shrinkObserver = document.createElement('div');\n    const style = 'position: absolute; height: 100%; width: 100%; top:0; left:0; opacity: 0; visibility: hidden; z-index: -1; overflow: hidden; contain: paint size style; pointer-events: none;';\n\n    resizeObserver.setAttribute('style', style);\n    growObserver.setAttribute('style', style);\n    shrinkObserver.setAttribute('style', style);\n    growObserver.style.overflow = shrinkObserver.style.overflow = 'auto';\n    growObserver.appendChild(document.createElement('div'));\n    shrinkObserver.appendChild(document.createElement('div'));\n    resizeObserver.appendChild(growObserver);\n    resizeObserver.appendChild(shrinkObserver);\n    shrinkObserver.firstChild.style.height = '200%';\n    shrinkObserver.firstChild.style.width = '200%';\n\n    createResizeObserver.resizeObserver = resizeObserver;\n  }\n\n  return createResizeObserver.resizeObserver.cloneNode(true);\n}\n\n/**\n * @param {function} callback\n * @return {Promise<void | number>|void}\n */\nfunction queueMicrotask(callback) {\n  if (typeof window.queueMicrotask !== 'function') {\n    if (window.Promise) {\n      return window.Promise.resolve()\n        .then(callback)\n        .catch(e => setTimeout(() => { throw e; }));\n    }\n    return callback();\n  }\n  return window.queueMicrotask(callback);\n}\n","import { Scrollbar } from './scrollbar';\nimport { SizeManager } from './size-manager';\nimport { addResizeListener } from './resize-observer';\n\nexport class VirtualScroller {\n  /**\n   * @typedef {{itemCount: number, itemBuilder: function(number):Element, onRemoveItem: function(number)=, itemSize: number=, bufferSize: number=, scrollPosition: number=}} VirtualScrollerParams\n   */\n  /**\n   * @param {Element} element\n   * @param {VirtualScrollerParams} params\n   * @returns {VirtualScroller}\n   */\n  static builder(element, params) {\n    return new VirtualScroller(element, params);\n  }\n\n  /**\n   * @param {Element} viewportElement\n   * @param {VirtualScrollerParams} params\n   */\n  constructor(viewportElement, params) {\n    /**\n     * @private\n     * @type {Element}\n     */\n    this.viewportElement = viewportElement;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.itemCount = params.itemCount;\n    /**\n     * @private\n     * @type {function(number)}\n     */\n    this.onRemoveItem = params.onRemoveItem;\n    /**\n     * @private\n     * @type {function(number):Element}\n     */\n    this.itemBuilder = params.itemBuilder;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.bufferSize = params.hasOwnProperty('bufferSize') ? params.bufferSize : 1;\n    /**\n     * @private\n     * @type {SizeManager}\n     */\n    this.sizeManager = SizeManager.builder();\n    /**\n     * @private\n     * @type {number}\n     */\n    this.expectedItemSize = params.itemSize || this.sizeManager.getAverageSize();\n    /**\n     * @private\n     * @type {number}\n     */\n    this.expectedTotalSize = this.itemCount * this.expectedItemSize;\n    /**\n     * @private\n     * @type {{}}\n     */\n    this.rendered = {};\n    /**\n     * @private\n     * @type {{start: number, end: number}}\n     */\n    this.range = {start: 0, end: 0};\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.prevScrollTop = params.scrollTop || 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.throttleTime = 50;\n\n    /**\n     * @private\n     * @type {Scrollbar}\n     */\n    this.scrollbar = Scrollbar.builder(this.viewportElement, {\n      scrollPosition: this.prevScrollTop,\n      totalSize: this.expectedTotalSize,\n      scrollListener: () => this.onScroll()\n    });\n    this.scheduleSync();\n  }\n\n  /**\n   * @private\n   */\n  onScroll() {\n    const scrollTop = this.scrollTop();\n    window.clearTimeout(this.scrollThrottlingId);\n    if (Math.abs(scrollTop - this.prevScrollTop) > this.scrollbar.viewportSize) {\n      // Throttle rendering and layout if user scroll too fast to improve scroll performance\n      // We can stuck with this case when use scrollbar holder to change position\n      this.scrollThrottlingId = setTimeout(() => {\n        this.scheduleSync();\n      }, this.throttleTime);\n    } else {\n      this.scheduleSync();\n    }\n    this.prevScrollTop = scrollTop;\n  }\n\n  /**\n   * @private\n   */\n  scheduleSync() {\n    this.syncId = this.syncId || window.requestAnimationFrame(() => {\n      this.syncId = null;\n      this.sync();\n    });\n  }\n\n  /**\n   * @private\n   */\n  sync() {\n    this.render(this.createRangeForCurrentPosition());\n  }\n\n  /**\n   * @private\n   * @returns {{start: number, end: number}}\n   */\n  createRangeForCurrentPosition() {\n    const scrollTop = this.scrollTop();\n    const viewportSize = this.scrollbar.viewportSize;\n    const bufferSize = this.bufferSize * viewportSize;\n    const startOffset = Math.max(scrollTop - bufferSize, 0);\n    const endOffset = scrollTop + viewportSize + bufferSize;\n\n    let start = Math.floor(startOffset / this.expectedItemSize);\n    for (let i = this.range.start; i <= this.range.end; i++) {\n      if (this.rendered[i] && this.rendered[i].offset + this.sizeManager.getHopefulSize(this.rendered[i]) > startOffset) {\n        start = i;\n        break;\n      }\n    }\n\n    let end = Math.ceil(endOffset / this.expectedItemSize) - 1;\n    for (let i = this.range.end; i >= this.range.start; i--) {\n      if (this.rendered[i] && this.rendered[i].offset < endOffset && this.rendered[i].offset >= startOffset) {\n        end = i;\n        break;\n      }\n    }\n\n    // Use average item size to more precisely calculate how many items we should render\n    // if expected item size failed and we have rendered items\n    const averageItemSize = this.sizeManager.getAverageSize();\n    const startElement = this.rendered[start];\n    if (startElement && startElement.offset > startOffset) {\n      start = start - Math.ceil((startElement.offset - startOffset) / averageItemSize);\n    }\n\n    const endElement = this.rendered[end];\n    if (endElement && (endElement.offset + this.sizeManager.getHopefulSize(endElement)) < endOffset) {\n      end = end + Math.ceil((endOffset - (endElement.offset + this.sizeManager.getHopefulSize(endElement))) / averageItemSize);\n    }\n\n    const maxIndex = this.itemCount - 1;\n    return {\n      start: Math.min(Math.max(start, 0), maxIndex),\n      end: Math.max(Math.min(end, maxIndex), 0)\n    };\n  }\n\n  /**\n   * @private\n   * @param {{start: number, end: number}} range\n   */\n  render(range) {\n    const firstVisibleItemIndex = this.findFirstVisibleItemIndex();\n    const addedElements = [];\n    let documentFragment = document.createDocumentFragment();\n    for (let i = range.start; i <= range.end; i++) {\n      /**\n       * Render elements so that preserving correct position in DOM tree\n       * so elements with less index should go in the DOM first\n       */\n      if (!this.rendered[i]) {\n        const newElement = this.rendered[i] = this.createElement(i);\n        addedElements.push(newElement);\n        documentFragment.appendChild(newElement);\n      } else if (documentFragment.firstChild) {\n        this.viewportElement.insertBefore(documentFragment, this.rendered[i]);\n        documentFragment = document.createDocumentFragment();\n      }\n    }\n    this.viewportElement.appendChild(documentFragment);\n\n    addedElements.forEach((element) => {\n      addResizeListener(element, () => {\n        this.sizeManager.remove(element);\n        this.scheduleSync();\n      });\n    });\n\n    /**\n     * Remove elements which out of the range\n     */\n    for (let i = this.range.start; i <= this.range.end; i++) {\n      if ((i < range.start || i > range.end) && this.rendered[i]) {\n        this.onRemoveItem && this.onRemoveItem(i);\n        this.sizeManager.remove(this.rendered[i]);\n        this.viewportElement.removeChild(this.rendered[i]);\n        delete this.rendered[i];\n      }\n    }\n\n    // Measure rendered elements sizes\n    for (let i = range.start; i <= range.end; i++) {\n      if (!this.sizeManager.has(this.rendered[i])) {\n        this.sizeManager.measure(this.rendered[i]);\n      }\n    }\n\n    // Layout elements\n    /**\n     * If we already have rendered elements we should try to position new\n     * elements or re-layout previous after resize with offset related to previously rendered elements\n     * this allows us to cover most popular case when user scroll from top to bottom and\n     * back. But if user would start from some middle point we can end with some jumping\n     * when reach the point where offset is negative\n     */\n    if (this.rendered[firstVisibleItemIndex] && range.start < firstVisibleItemIndex) {\n      let offset = this.rendered[firstVisibleItemIndex].offset;\n      for (let i = (firstVisibleItemIndex - 1); i >= range.start; i--) {\n        const renderedElement = this.rendered[i];\n        offset = offset - this.sizeManager.getHopefulSize(renderedElement);\n        this.positionElement(renderedElement, Math.max(offset, 0));\n      }\n    }\n\n    // If we reach the first element and its offset bigger than 0\n    // we should reset offset and correct scroll position\n    // We can stuck with this case when user had narrow viewport\n    // then scroll down so that we have removed this first element\n    // and then make viewport bigger so because we don't correct\n    // position on resize we should correct it here\n    if (range.start === 0 && this.rendered[0].offset > 0) {\n      this.rendered[0].offset = 0;\n    }\n\n    /**\n     * If start element already positioned we should start from\n     * this point otherwise calculate estimated offset\n     */\n    let scrollCorrection = 0;\n    let startElement = this.rendered[range.start];\n    let offset = startElement && startElement.offset ? startElement.offset : range.start * this.expectedItemSize;\n    for (let i = range.start; i <= range.end; i++) {\n      const renderedElement = this.rendered[i];\n      if (i === firstVisibleItemIndex) {\n        scrollCorrection = offset - renderedElement.offset;\n      }\n      this.positionElement(renderedElement, offset);\n      offset += this.sizeManager.getHopefulSize(renderedElement);\n    }\n\n    if (scrollCorrection) {\n      this.scrollTo(this.scrollTop() + scrollCorrection);\n    }\n\n    /**\n     * Adjust scrollbar size\n     */\n    const offsetMismatch = offset - (range.end * this.expectedItemSize);\n    const maxScrollTop = this.scrollbar.totalSize - this.scrollbar.viewportSize;\n    const maxIndex = this.itemCount - 1;\n    if (this.scrollTop() >= maxScrollTop &&\n      (offset > this.scrollbar.totalSize || range.end < maxIndex)) {\n      // Increase scroll height if we reach end but we still have items which\n      // should be rendered\n      this.scrollbar.updateTotalSize(this.expectedTotalSize + offsetMismatch);\n    } else if (range.end === maxIndex) {\n      // If this is the last element we should correct scroll height\n      // because we can render more space then we need\n      this.scrollbar.updateTotalSize(offset);\n    }\n\n    this.range = range;\n\n    const checkRange = this.createRangeForCurrentPosition();\n    if (checkRange.start !== range.start || checkRange.end !== range.end) {\n      this.scheduleSync();\n    }\n  }\n\n  /**\n   * Return first visible item index\n   * @return {number} Returns -1 if we can not find first visible item\n   */\n  findFirstVisibleItemIndex() {\n    const scrollTop = this.scrollTop();\n    const index = Object.keys(this.rendered).find((i) => {\n      const renderedElement = this.rendered[i];\n      return renderedElement.offset <= scrollTop && renderedElement.offset + this.sizeManager.getHopefulSize(renderedElement) > scrollTop;\n    });\n    return index ? Number(index) : -1;\n  }\n\n  /**\n   * @private\n   * @param {number} i Element index\n   * @returns {HTMLElement}\n   */\n  createElement(i) {\n    const item = document.createElement('div');\n    item.setAttribute('index', String(i));\n    item.style.position = 'absolute';\n    item.style.width = '100%';\n    item.appendChild(this.itemBuilder(i));\n    return item;\n  }\n\n  /**\n   * @private\n   * @param {HTMLElement} renderedElement\n   * @param {number} offset\n   */\n  positionElement(renderedElement, offset) {\n    renderedElement.style.top = this.scrollbar.calc(offset) + 'px';\n    renderedElement.offset = offset;\n  }\n\n  /**\n   * @public\n   * @return {number}\n   */\n  scrollTop() {\n    return this.scrollbar.scrollPosition;\n  }\n\n  /**\n   * @public\n   * @param {number} position\n   */\n  scrollTo(position) {\n    this.scrollbar.scrollTo(position);\n  }\n\n  /**\n   * @public\n   */\n  destroy() {\n    this.scrollbar.destroy();\n    this.sizeManager = null;\n    this.rendered = null;\n    window.cancelAnimationFrame(this.syncId);\n    window.clearTimeout(this.scrollThrottlingId);\n    this.syncId = null;\n    this.scrollThrottlingId = null;\n  }\n\n  /**\n   * @public\n   * @param {number} value\n   */\n  updateItemCount(value) {\n    if (this.itemCount !== value) {\n      this.itemCount = value;\n      this.expectedTotalSize = this.itemCount * this.expectedItemSize;\n      this.scrollbar.updateTotalSize(this.expectedTotalSize);\n      this.scheduleSync();\n    }\n  }\n}\n","import { VirtualScroller } from '../lib/virtual-scroller';\n\nfunction main() {\n  const params = JSON.parse(decodeURIComponent(window.location.search.slice(1)) || '{}');\n  const count = params.itemCount || 3000000;\n\n  const appElement = document.getElementById('app');\n\n  if (!params.window) {\n    appElement.style.height = '80vh';\n    appElement.style.overflow = 'auto';\n  }\n\n  VirtualScroller.builder(appElement, Object.assign({\n    itemCount: count,\n    itemBuilder(it) {\n      const item = document.createElement('div');\n      item.style.padding = '8px';\n      item.innerHTML = it % 2 ?\n        `<b>${it + 1}</b>/${count} - Lorem Ipsum is simply dummy text` :\n        `<b>${it + 1}</b>/${count} - Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book`;\n      return item;\n    }\n  }, params));\n}\n\nmain();\n"]}