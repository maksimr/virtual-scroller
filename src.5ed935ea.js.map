{"version":3,"sources":["node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","lib/scrollbar.js","lib/size-manager.js","lib/resize-observer.js","lib/virtual-scroller.js","src/index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","module","exports","__esModule","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Scrollbar","viewportElement","params","scrollPosition","scrollElement","findScrollableElement","scrollListenElement","document","documentElement","window","scrollListener","horizontal","viewportSize","clientWidth","clientHeight","maxScrollSize","Math","round","calcMaxBrowserScrollSize","currentPage","prevViewportScrollPosition","currentPageOffset","runwayElement","createElement","style","width","height","scrollSize","position","visibility","overflow","updateTotalSize","totalSize","getComputedStyle","firstChild","insertBefore","appendChild","addScrollListener","scrollTo","viewportScrollTop","getViewportScrollPosition","abs","onJump","onSmoothScroll","updateScrollPosition","max","browserScrollPosition","getOffsetBetweenScrollElementAndViewport","findOffsetBetween","viewportScrollPosition","offset","arguments","scrollLeft","scrollTop","pageSize","scrollToNextPage","scrollToPrevPage","scrollOnPage","pageNumber","floor","setCurrentPage","prevPage","viewportScrollTo","overlapSize","onScroll","bind","addEventListener","removeEventListener","pageCount","ceil","prevOverlapSize","scrollPage","removeChild","removeScrollListener","bigNumber","div","left","top","body","size","getBoundingClientRect","parseInt","element","parentNode","boundingClientRect","boundingClientRectDocument","offsetTop","offsetLeft","DEFAULT_HEIGHT_ESTIMATE_PX","SizeManager","reset","sizes","has","oldSize","get","undefined","measuredCount","newSize","offsetWidth","offsetHeight","totalMeasuredSize","set","getAverageSize","delete","WeakMap","addResizeListener","listener","prevElementHeight","prevElementWidth","options","passive","capture","resizeObserver","createResizeObserver","queueMicrotask","setupTriggers","event","currentTarget","growObserver","shrinkObserver","lastChild","growObserverOffsetHeight","growObserverOffsetWidth","growObserverScrollHeight","scrollHeight","growObserverScrollWidth","scrollWidth","shrinkObserverScrollHeight","shrinkObserverScrollWidth","setupScrollPosition","setAttribute","cloneNode","callback","Promise","resolve","then","catch","e","setTimeout","VirtualScroller","itemCount","Boolean","onRemoveItem","itemBuilder","bufferSize","hasOwnProperty","sizeManager","builder","expectedItemSize","itemSize","expectedTotalSize","rendered","range","start","end","prevScrollPosition","throttleTime","scrollbar","scheduleSync","clearTimeout","scrollThrottlingId","syncId","requestAnimationFrame","sync","render","createRangeForCurrentPosition","startOffset","endOffset","getHopefulSize","averageItemSize","startElement","endElement","maxIndex","min","firstVisibleItemIndex","findFirstVisibleItemIndex","addedElements","documentFragment","createDocumentFragment","newElement","push","forEach","remove","measure","renderedElement","positionElement","scrollCorrection","offsetMismatch","maxScrollTop","checkRange","index","keys","find","Number","item","String","calc","destroy","cancelAnimationFrame","value","main","JSON","parse","decodeURIComponent","location","search","slice","count","appElement","getElementById","assign","it","padding","innerHTML"],"mappings":"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","file":"src.5ed935ea.js","sourceRoot":"..","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","export class Scrollbar {\n  /**\n   * @typedef {{totalSize: number, scrollListener: function(...[*]=):void, horizontal?: boolean, scrollPosition?: number}} ScrollbarParams\n   */\n  /**\n   * @param {HTMLElement} viewportElement\n   * @param {ScrollbarParams} params\n   * @return {Scrollbar}\n   */\n  static builder(viewportElement, params) {\n    return new Scrollbar(viewportElement, params);\n  }\n\n  /**\n   * @param {HTMLElement} viewportElement\n   * @param {ScrollbarParams} params\n   */\n  constructor(viewportElement, params) {\n    /**\n     * @public\n     * @type number\n     */\n    this.scrollPosition = 0;\n\n    /**\n     * @private\n     * @type HTMLElement\n     */\n    this.viewportElement = viewportElement;\n    /**\n     * @private\n     * @type HTMLElement\n     */\n    this.scrollElement = findScrollableElement(this.viewportElement);\n    /**\n     * @private\n     * @type {(Element|Window)}\n     */\n    this.scrollListenElement = this.scrollElement === document.documentElement ? window : this.scrollElement;\n    /**\n     * @private\n     * @type function():any\n     */\n    this.scrollListener = params.scrollListener;\n    /**\n     * @private\n     * @type boolean\n     */\n    this.horizontal = params.horizontal;\n    /**\n     * @public\n     * @type number\n     */\n    this.viewportSize = this.horizontal ? this.scrollElement.clientWidth : this.scrollElement.clientHeight;\n    /**\n     * Divide on 2 because it's too performance consuming and complicated handle case when offset between\n     * scroll node and viewport is changed dynamically we should also change max browser scroll size too.\n     * And Chrome works significantly slower and janky when you have a scrollbar with maximal height\n     * @private\n     * @type {number}\n     */\n    this.maxScrollSize = Math.round(calcMaxBrowserScrollSize(this.horizontal) / 2);\n\n    /**\n     * @private\n     * @type number\n     */\n    this.currentPage = 0;\n    /**\n     * @private\n     * @type number\n     */\n    this.prevViewportScrollPosition = 0;\n\n    /**\n     * @private\n     * @type number\n     */\n    this.currentPageOffset = 0;\n\n    /**\n     * @private\n     * @type HTMLElement\n     */\n    this.runwayElement = document.createElement('div');\n    this.runwayElement.style.width = this.runwayElement.style.height = '1px';\n    this.runwayElement.style[this.horizontal ? 'width' : 'height'] = this.scrollSize + 'px';\n    this.runwayElement.style.position = 'relative';\n    this.runwayElement.style.visibility = 'hidden';\n    this.runwayElement.style.overflow = 'hidden';\n\n    this.updateTotalSize(params.totalSize || 0);\n\n    if (window.getComputedStyle(this.viewportElement).position === 'static') {\n      this.viewportElement.style.position = 'relative';\n    }\n\n    if (this.viewportElement.firstChild) {\n      this.viewportElement.insertBefore(this.runwayElement, this.viewportElement.firstChild);\n    } else {\n      this.viewportElement.appendChild(this.runwayElement);\n    }\n\n    this.addScrollListener();\n\n    if (params.scrollPosition) {\n      this.scrollTo(params.scrollPosition);\n    }\n  }\n\n  /**\n   * @private\n   */\n  onScroll() {\n    const viewportScrollTop = this.getViewportScrollPosition();\n    if (Math.abs(viewportScrollTop - this.prevViewportScrollPosition) > this.viewportSize) {\n      this.onJump();\n    } else {\n      this.onSmoothScroll();\n    }\n\n    this.prevViewportScrollPosition = this.getViewportScrollPosition();\n    this.updateScrollPosition(this.getViewportScrollPosition() + this.currentPageOffset);\n    this.scrollListener();\n  }\n\n  /**\n   * @private\n   * @param {number} scrollPosition\n   */\n  updateScrollPosition(scrollPosition) {\n    this.scrollPosition = Math.max(scrollPosition, 0);\n  }\n\n  /**\n   * @private\n   * @return {number}\n   */\n  getViewportScrollPosition() {\n    return Math.max(this.browserScrollPosition() - this.getOffsetBetweenScrollElementAndViewport(), 0);\n  }\n\n  /**\n   * @private\n   * @return {number}\n   */\n  getOffsetBetweenScrollElementAndViewport() {\n    return this.scrollElement !== this.viewportElement ? findOffsetBetween(this.viewportElement, this.scrollElement, this.horizontal) : 0;\n  }\n\n  /**\n   * @private\n   * @param {number} viewportScrollPosition\n   * @return {number}\n   */\n  viewportScrollTo(viewportScrollPosition) {\n    const offset = this.getOffsetBetweenScrollElementAndViewport();\n    return this.browserScrollPosition(viewportScrollPosition + offset);\n  }\n\n  /**\n   * @param {number=} scrollPosition\n   * @return {number}\n   */\n  browserScrollPosition(scrollPosition) {\n    if (!arguments.length) {\n      return this.horizontal ?\n        this.scrollElement.scrollLeft :\n        this.scrollElement.scrollTop;\n    }\n\n    if (this.horizontal) {\n      this.scrollElement.scrollLeft = scrollPosition;\n    } else {\n      this.scrollElement.scrollTop = scrollPosition;\n    }\n  }\n\n  /**\n   * @private\n   */\n  onSmoothScroll() {\n    const scrollPosition = this.getViewportScrollPosition();\n\n    if (scrollPosition + this.currentPageOffset > (this.currentPage + 1) * this.pageSize) {\n      this.scrollToNextPage();\n    } else if (this.currentPage && (scrollPosition + this.currentPageOffset) < this.currentPage * this.pageSize) {\n      this.scrollToPrevPage();\n    }\n  }\n\n  /**\n   * @private\n   */\n  scrollToNextPage() {\n    this.scrollOnPage(this.currentPage + 1);\n  }\n\n  /**\n   * @private\n   */\n  scrollToPrevPage() {\n    this.scrollOnPage(this.currentPage - 1);\n  }\n\n  /**\n   * @private\n   */\n  onJump() {\n    const viewportScrollPosition = this.getViewportScrollPosition();\n    // convert actual pixels to total pixels\n    const scrollPosition = viewportScrollPosition * ((this.totalSize - this.viewportSize) / (this.scrollSize - this.viewportSize));\n    const pageNumber = Math.floor(scrollPosition / this.pageSize);\n    this.setCurrentPage(pageNumber);\n  }\n\n  /**\n   * @private\n   * @param {number} currentPage\n   */\n  scrollOnPage(currentPage) {\n    const prevPage = this.currentPage;\n    if (prevPage < currentPage) {\n      this.viewportScrollTo(this.getViewportScrollPosition() - this.overlapSize);\n    } else if (prevPage > currentPage) {\n      this.viewportScrollTo(this.getViewportScrollPosition() + this.overlapSize);\n    }\n    this.setCurrentPage(currentPage);\n  }\n\n  /**\n   * @private\n   * @param {number} currentPage\n   */\n  setCurrentPage(currentPage) {\n    if (currentPage !== this.currentPage) {\n      this.currentPage = Math.max(currentPage, 0);\n      this.currentPageOffset = Math.round(this.currentPage * this.overlapSize);\n    }\n  }\n\n  /**\n   * @private\n   */\n  addScrollListener() {\n    /**\n     * @private\n     */\n    this.onScroll = this.onScroll.bind(this);\n    this.scrollListenElement.addEventListener('scroll', this.onScroll);\n  }\n\n  /**\n   * @private\n   */\n  removeScrollListener() {\n    this.scrollListenElement.removeEventListener('scroll', this.onScroll);\n  }\n\n  /**\n   * @public\n   * @param {number} totalSize\n   */\n  updateTotalSize(totalSize) {\n    if (this.totalSize === totalSize) {\n      return;\n    }\n\n    /**\n     * @public\n     * @type {number}\n     */\n    this.totalSize = totalSize;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scrollSize = this.maxScrollSize > this.totalSize ? this.totalSize : this.maxScrollSize;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pageSize = Math.floor(this.maxScrollSize / 100);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pageCount = Math.ceil(this.totalSize / this.pageSize);\n\n    const prevOverlapSize = this.overlapSize;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.overlapSize = this.totalSize > this.maxScrollSize ? (this.totalSize - this.maxScrollSize) / (this.pageCount - 1) : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.currentPageOffset = Math.round(this.currentPage * this.overlapSize);\n\n    this.runwayElement.style[this.horizontal ? 'width' : 'height'] = this.scrollSize + 'px';\n\n    if (this.scrollPosition > (this.totalSize - this.viewportSize)) {\n      this.updateScrollPosition(this.totalSize - this.viewportSize);\n    }\n\n    // If we on the last page and user has updated totalSize\n    // we should check overlap size and if new overlap size is\n    // bigger than previous we should remove this difference by\n    // jumping back on this size otherwise it can lead to the problem\n    // that we have reach the bottom and can not scroll future but\n    // totalSize say that we should have scroll possibility\n    if (\n      this.currentPage === this.pageCount - 1 &&\n      prevOverlapSize &&\n      prevOverlapSize < this.overlapSize) {\n      this.prevViewportScrollPosition = this.viewportScrollTo(this.prevViewportScrollPosition - this.currentPage * (this.overlapSize - prevOverlapSize));\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * @public\n   * @param {number} scrollPosition\n   */\n  scrollTo(scrollPosition) {\n    if (this.scrollPosition !== scrollPosition) {\n      this.updateScrollPosition(scrollPosition);\n      const scrollPage = Math.floor(scrollPosition / this.pageSize);\n      this.setCurrentPage(scrollPage);\n      this.prevViewportScrollPosition = this.viewportScrollTo(scrollPosition - this.currentPageOffset);\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * @public\n   * Calculate actual position on viewport for passed scrollbar position\n   * @param {number} position\n   * @return {number}\n   */\n  calc(position) {\n    return position - this.currentPageOffset;\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * @public\n   */\n  destroy() {\n    this.viewportElement.removeChild(this.runwayElement);\n    this.removeScrollListener();\n  }\n}\n\n/**\n * @param {boolean=} horizontal\n * @return {number}\n */\nexport function calcMaxBrowserScrollSize(horizontal) {\n  const bigNumber = '9999999999999999px';\n  const div = document.createElement('div');\n  const style = div.style;\n  style.position = 'absolute';\n  style.left = bigNumber;\n  style.top = bigNumber;\n  document.body.appendChild(div);\n\n  const size = div.getBoundingClientRect()[horizontal ? 'left' : 'top'] || parseInt(bigNumber);\n  document.body.removeChild(div);\n  return Math.abs(size);\n}\n\n/**\n * @param {HTMLElement} element\n * @return {HTMLElement}\n */\nexport function findScrollableElement(element) {\n  while (element.parentNode && element.parentNode !== document) {\n    const overflow = window.getComputedStyle(element).overflow;\n    if (overflow === 'visible' || overflow === '') {\n      /**\n       * @type {Element}\n       */\n      // @ts-ignore\n      element = element.parentNode;\n      continue;\n    }\n    break;\n  }\n  return element;\n}\n\n/**\n * @param {(HTMLElement)} element\n * @param {(HTMLElement)} scrollElement\n * @param {boolean?} horizontal\n * @return {number}\n */\nfunction findOffsetBetween(element, scrollElement, horizontal = false) {\n  // If scrollElement is documentElement we can\n  // calculate it by getBoundingClientRect and dont traverse all parents\n  if (scrollElement === document.documentElement) {\n    const boundingClientRect = element.getBoundingClientRect();\n    const boundingClientRectDocument = scrollElement.getBoundingClientRect();\n    return horizontal ?\n      boundingClientRect.left - boundingClientRectDocument.left :\n      boundingClientRect.top - boundingClientRectDocument.top;\n  }\n\n  let offset = 0;\n  while (element && element.parentNode && element !== scrollElement) {\n    // noinspection JSValidateTypes\n    /**\n     * @type {HTMLElement}\n     */\n      // @ts-ignore\n    const parentNode = element.parentNode;\n    const offsetTop = horizontal ? element.offsetLeft : element.offsetTop;\n    offset = (window.getComputedStyle(parentNode).position !== 'static') ?\n      offset + offsetTop :\n      offset + (offsetTop - (horizontal ? parentNode.offsetLeft : parentNode.offsetTop));\n    element = parentNode;\n  }\n  return offset;\n}","const DEFAULT_HEIGHT_ESTIMATE_PX = 50;\n\nexport class SizeManager {\n  /**\n   * @param {boolean=} horizontal\n   * @returns {SizeManager}\n   */\n  static builder(horizontal = false) {\n    return new SizeManager(horizontal);\n  }\n\n  /**\n   * @param {boolean} horizontal\n   */\n  constructor(horizontal) {\n    this.horizontal = horizontal;\n    this.reset();\n  }\n\n  /**\n   * @param {!HTMLElement} element The element to measure.\n   * @return {boolean}\n   */\n  has(element) {\n    return this.sizes.has(element);\n  }\n\n  /**\n   * Measures and stores |element|'s size. If |element| was measured\n   * previously, this updates everything to use the new current size.\n   * @param {!HTMLElement} element The element to measure.\n   */\n  measure(element) {\n    let oldSize = this.sizes.get(element);\n    if (oldSize === undefined) {\n      oldSize = 0;\n      this.measuredCount++;\n    }\n    const newSize = this.horizontal ? element.offsetWidth : element.offsetHeight;\n    this.totalMeasuredSize += newSize - oldSize;\n    this.sizes.set(element, newSize);\n  }\n\n  /**\n   * Returns a size for |element|, either the last stored size or an\n   * estimate based on all other previously measured elements or a\n   * default.\n   * @param {!HTMLElement} element The element to produce a size for.\n   * @return {number}\n   */\n  getHopefulSize(element) {\n    const size = this.sizes.get(element);\n    return size === undefined ? this.getAverageSize() : size;\n  }\n\n  getAverageSize() {\n    return this.measuredCount > 0 ?\n      this.totalMeasuredSize / this.measuredCount :\n      DEFAULT_HEIGHT_ESTIMATE_PX;\n  }\n\n  /**\n   * Removes all data related to |element| from the manager.\n   * @param {!HTMLElement} element The element to remove.\n   */\n  remove(element) {\n    const oldSize = this.sizes.get(element);\n    if (oldSize === undefined) {\n      return;\n    }\n    this.totalMeasuredSize -= oldSize;\n    this.measuredCount--;\n    this.sizes.delete(element);\n  }\n\n  reset() {\n    this.sizes = new WeakMap();\n    this.totalMeasuredSize = 0;\n    this.measuredCount = 0;\n  }\n}\n","/**\n * @param {HTMLElement} element\n * @param {function} listener\n * @return {function(...[*]=)} Remove listener function\n */\nexport function addResizeListener(element, listener) {\n  const options = {passive: true, capture: true};\n  const resizeObserver = createResizeObserver();\n  let prevElementHeight;\n  let prevElementWidth;\n\n  element.appendChild(resizeObserver);\n  resizeObserver.addEventListener('scroll', onScroll, options);\n\n  // Postpone calculation to avoid \"Layout Thrashing\"\n  queueMicrotask(() => setupTriggers(resizeObserver));\n\n  return () => {\n    resizeObserver.removeEventListener('scroll', onScroll, options);\n    element.removeChild(resizeObserver);\n  };\n\n  function onScroll(event) {\n    if (\n      prevElementHeight !== element.offsetHeight ||\n      prevElementWidth !== element.offsetWidth) {\n      prevElementHeight = element.offsetHeight;\n      prevElementWidth = element.offsetWidth;\n      const resizeObserver = event.currentTarget;\n      setupTriggers(resizeObserver);\n      listener(element);\n    }\n  }\n}\n\n/**\n * @param {Node} resizeObserver\n */\nfunction setupTriggers(resizeObserver) {\n  /**\n   * @type {HTMLElement}\n   */\n    // @ts-ignore\n  const growObserver = resizeObserver.firstChild;\n  /**\n   * @type {HTMLElement}\n   */\n    // @ts-ignore\n  const shrinkObserver = resizeObserver.lastChild;\n  const growObserverOffsetHeight = growObserver.offsetHeight;\n  const growObserverOffsetWidth = growObserver.offsetWidth;\n  const growObserverScrollHeight = growObserver.scrollHeight;\n  const growObserverScrollWidth = growObserver.scrollWidth;\n  const shrinkObserverScrollHeight = shrinkObserver.scrollHeight;\n  const shrinkObserverScrollWidth = shrinkObserver.scrollWidth;\n\n  queueMicrotask(() => {\n    /**\n     * @type {HTMLElement}\n     */\n      // @ts-ignore\n    const firstChild = growObserver.firstChild;\n    firstChild.style.height = growObserverOffsetHeight + 1 + 'px';\n    firstChild.style.width = growObserverOffsetWidth + 1 + 'px';\n    queueMicrotask(setupScrollPosition);\n  });\n\n  function setupScrollPosition() {\n    growObserver.scrollTop = growObserverScrollHeight;\n    growObserver.scrollLeft = growObserverScrollWidth;\n    shrinkObserver.scrollTop = shrinkObserverScrollHeight;\n    shrinkObserver.scrollLeft = shrinkObserverScrollWidth;\n  }\n}\n\n/**\n * @return {Node}\n */\nfunction createResizeObserver() {\n  // @ts-ignore\n  if (!createResizeObserver.resizeObserver) {\n    const resizeObserver = document.createElement('div');\n    const growObserver = document.createElement('div');\n    const shrinkObserver = document.createElement('div');\n    const style = 'position: absolute; height: 100%; width: 100%; top:0; left:0; opacity: 0; visibility: hidden; z-index: -1; overflow: hidden; contain: paint size style; pointer-events: none;';\n\n    resizeObserver.setAttribute('style', style);\n    growObserver.setAttribute('style', style);\n    shrinkObserver.setAttribute('style', style);\n    growObserver.style.overflow = shrinkObserver.style.overflow = 'auto';\n    growObserver.appendChild(document.createElement('div'));\n    shrinkObserver.appendChild(document.createElement('div'));\n    resizeObserver.appendChild(growObserver);\n    resizeObserver.appendChild(shrinkObserver);\n    /**\n     * @type {HTMLElement}\n     */\n      // @ts-ignore\n    const firstChild = shrinkObserver.firstChild;\n    firstChild.style.height = '200%';\n    firstChild.style.width = '200%';\n\n    // @ts-ignore\n    createResizeObserver.resizeObserver = resizeObserver;\n  }\n\n  // @ts-ignore\n  return createResizeObserver.resizeObserver.cloneNode(true);\n}\n\n/**\n * @param {function():any} callback\n * @return {Promise<void | number>|void}\n */\nfunction queueMicrotask(callback) {\n  if (typeof window.queueMicrotask !== 'function') {\n    if (window.Promise) {\n      return window.Promise.resolve()\n        .then(callback)\n        .catch(e => setTimeout(() => { throw e; }));\n    }\n    return callback();\n  }\n  return window.queueMicrotask(callback);\n}\n","import { Scrollbar } from './scrollbar';\nimport { SizeManager } from './size-manager';\nimport { addResizeListener } from './resize-observer';\n\nexport class VirtualScroller {\n  /**\n   * @typedef {{itemCount: number, itemBuilder: function(number):Element, onRemoveItem?: function(number):void, itemSize?: number, bufferSize?: number, scrollPosition?: number, horizontal?: boolean}} VirtualScrollerParams\n   */\n  /**\n   * @param {HTMLElement} element\n   * @param {VirtualScrollerParams} params\n   * @returns {VirtualScroller}\n   */\n  static builder(element, params) {\n    return new VirtualScroller(element, params);\n  }\n\n  /**\n   * @param {HTMLElement} viewportElement\n   * @param {VirtualScrollerParams} params\n   */\n  constructor(viewportElement, params) {\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.viewportElement = viewportElement;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.itemCount = params.itemCount;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.horizontal = Boolean(params.horizontal);\n    /**\n     * @private\n     * @type {function(number):void}\n     */\n    this.onRemoveItem = params.onRemoveItem;\n    /**\n     * @private\n     * @type {function(number):Element}\n     */\n    this.itemBuilder = params.itemBuilder;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.bufferSize = params.hasOwnProperty('bufferSize') ? params.bufferSize : 1;\n    /**\n     * @private\n     * @type {SizeManager}\n     */\n    this.sizeManager = SizeManager.builder(this.horizontal);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.expectedItemSize = params.itemSize || this.sizeManager.getAverageSize();\n    /**\n     * @private\n     * @type {number}\n     */\n    this.expectedTotalSize = this.itemCount * this.expectedItemSize;\n    /**\n     * @private\n     * @type {{}}\n     */\n    this.rendered = {};\n    /**\n     * @private\n     * @type {{start: number, end: number}}\n     */\n    this.range = {start: 0, end: 0};\n    /**\n     * @private\n     * @type {number}\n     */\n    this.prevScrollPosition = params.scrollPosition || 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.throttleTime = 50;\n\n    /**\n     * @private\n     * @type {Scrollbar}\n     */\n    this.scrollbar = Scrollbar.builder(this.viewportElement, {\n      horizontal: this.horizontal,\n      scrollPosition: this.prevScrollPosition,\n      totalSize: this.expectedTotalSize,\n      scrollListener: () => this.onScroll()\n    });\n    this.scheduleSync();\n  }\n\n  /**\n   * @private\n   */\n  onScroll() {\n    const scrollPosition = this.scrollPosition();\n    window.clearTimeout(this.scrollThrottlingId);\n    if (Math.abs(scrollPosition - this.prevScrollPosition) > this.scrollbar.viewportSize) {\n      // Throttle rendering and layout if user scroll too fast to improve scroll performance\n      // We can stuck with this case when use scrollbar holder to change position\n      this.scrollThrottlingId = setTimeout(() => {\n        this.scheduleSync();\n      }, this.throttleTime);\n    } else {\n      this.scheduleSync();\n    }\n    this.prevScrollPosition = scrollPosition;\n  }\n\n  /**\n   * @private\n   */\n  scheduleSync() {\n    this.syncId = this.syncId || window.requestAnimationFrame(() => {\n      this.syncId = null;\n      this.sync();\n    });\n  }\n\n  /**\n   * @private\n   */\n  sync() {\n    this.render(this.createRangeForCurrentPosition());\n  }\n\n  /**\n   * @private\n   * @returns {{start: number, end: number}}\n   */\n  createRangeForCurrentPosition() {\n    const scrollPosition = this.scrollPosition();\n    const viewportSize = this.scrollbar.viewportSize;\n    const bufferSize = this.bufferSize * viewportSize;\n    const startOffset = Math.max(scrollPosition - bufferSize, 0);\n    const endOffset = scrollPosition + viewportSize + bufferSize;\n\n    let start = Math.floor(startOffset / this.expectedItemSize);\n    for (let i = this.range.start; i <= this.range.end; i++) {\n      if (\n        this.rendered[i] &&\n        this.rendered[i].offset + this.sizeManager.getHopefulSize(this.rendered[i]) > startOffset &&\n        this.rendered[i].offset < endOffset) {\n        start = i;\n        break;\n      }\n    }\n\n    let end = Math.ceil(endOffset / this.expectedItemSize) - 1;\n    for (let i = this.range.end; i >= this.range.start; i--) {\n      if (\n        this.rendered[i] &&\n        this.rendered[i].offset < endOffset &&\n        this.rendered[i].offset >= startOffset) {\n        end = i;\n        break;\n      }\n    }\n\n    // Use average item size to more precisely calculate how many items we should render\n    // if expected item size failed and we have rendered items\n    const averageItemSize = this.sizeManager.getAverageSize();\n    const startElement = this.rendered[start];\n    if (startElement && startElement.offset > startOffset) {\n      start = start - Math.ceil((startElement.offset - startOffset) / averageItemSize);\n    }\n\n    const endElement = this.rendered[end];\n    if (endElement && (endElement.offset + this.sizeManager.getHopefulSize(endElement)) < endOffset) {\n      end = end + Math.ceil((endOffset - (endElement.offset + this.sizeManager.getHopefulSize(endElement))) / averageItemSize);\n    }\n\n    const maxIndex = this.itemCount - 1;\n    return {\n      start: Math.min(Math.max(start, 0), maxIndex),\n      end: Math.max(Math.min(end, maxIndex), 0)\n    };\n  }\n\n  /**\n   * @private\n   * @param {{start: number, end: number}} range\n   */\n  render(range) {\n    const firstVisibleItemIndex = this.findFirstVisibleItemIndex();\n    const addedElements = [];\n    let documentFragment = document.createDocumentFragment();\n    for (let i = range.start; i <= range.end; i++) {\n      // Render elements so that preserving correct position in DOM tree\n      // so elements with less index should go in the DOM first\n      if (!this.rendered[i]) {\n        const newElement = this.rendered[i] = this.createElement(i);\n        addedElements.push(newElement);\n        documentFragment.appendChild(newElement);\n      } else if (documentFragment.firstChild) {\n        this.viewportElement.insertBefore(documentFragment, this.rendered[i]);\n        documentFragment = document.createDocumentFragment();\n      }\n    }\n    this.viewportElement.appendChild(documentFragment);\n\n    addedElements.forEach((element) => {\n      addResizeListener(element, () => {\n        this.sizeManager.remove(element);\n        this.scheduleSync();\n      });\n    });\n\n    // Remove elements which out of the range\n    for (let i = this.range.start; i <= this.range.end; i++) {\n      if ((i < range.start || i > range.end) && this.rendered[i]) {\n        this.onRemoveItem && this.onRemoveItem(i);\n        this.sizeManager.remove(this.rendered[i]);\n        this.viewportElement.removeChild(this.rendered[i]);\n        delete this.rendered[i];\n      }\n    }\n\n    // Measure rendered elements sizes\n    for (let i = range.start; i <= range.end; i++) {\n      if (!this.sizeManager.has(this.rendered[i])) {\n        this.sizeManager.measure(this.rendered[i]);\n      }\n    }\n\n    // Layout elements\n    // If we already have rendered elements we should try to position new\n    // elements or re-layout previous after resize with offset related to previously rendered elements\n    // this allows us to cover most popular case when user scroll from top to bottom and\n    // back. But if user would start from some middle point we can end with some jumping\n    // when reach the point where offset is negative\n    if (this.rendered[firstVisibleItemIndex] && range.start < firstVisibleItemIndex) {\n      let offset = this.rendered[firstVisibleItemIndex].offset;\n      for (let i = (firstVisibleItemIndex - 1); i >= range.start; i--) {\n        const renderedElement = this.rendered[i];\n        offset = offset - this.sizeManager.getHopefulSize(renderedElement);\n        this.positionElement(renderedElement, Math.max(offset, 0));\n      }\n    }\n\n    // If we reach the first element and its offset bigger than 0\n    // we should reset offset and correct scroll position\n    // We can stuck with this case when user had narrow viewport\n    // then scroll down so that we have removed this first element\n    // and then make viewport bigger so because we don't correct\n    // position on resize we should correct it here\n    if (range.start === 0 && this.rendered[0].offset > 0) {\n      this.rendered[0].offset = 0;\n    }\n\n    // If start element already positioned we should start from\n    // this point otherwise calculate estimated offset\n    let scrollCorrection = 0;\n    let startElement = this.rendered[range.start];\n    let offset = startElement && startElement.offset ? startElement.offset : range.start * this.expectedItemSize;\n    for (let i = range.start; i <= range.end; i++) {\n      const renderedElement = this.rendered[i];\n      if (i === firstVisibleItemIndex) {\n        scrollCorrection = offset - renderedElement.offset;\n      }\n      this.positionElement(renderedElement, offset);\n      offset += this.sizeManager.getHopefulSize(renderedElement);\n    }\n\n    if (scrollCorrection) {\n      this.scrollTo(this.scrollPosition() + scrollCorrection);\n    }\n\n    // Adjust scrollbar size\n    const offsetMismatch = offset - (range.end * this.expectedItemSize);\n    const maxScrollTop = this.scrollbar.totalSize - this.scrollbar.viewportSize;\n    const maxIndex = this.itemCount - 1;\n    if (this.scrollPosition() >= maxScrollTop &&\n      (offset > this.scrollbar.totalSize || range.end < maxIndex)) {\n      // Increase scroll height if we reach end but we still have items which\n      // should be rendered\n      this.scrollbar.updateTotalSize(this.expectedTotalSize + offsetMismatch);\n    } else if (range.end === maxIndex) {\n      // If this is the last element we should correct scroll height\n      // because we can render more space then we need\n      this.scrollbar.updateTotalSize(offset);\n    }\n\n    this.range = range;\n\n    const checkRange = this.createRangeForCurrentPosition();\n    if (checkRange.start !== range.start || checkRange.end !== range.end) {\n      this.scheduleSync();\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} Returns first visible item index or -1 if we can not find first visible item\n   */\n  findFirstVisibleItemIndex() {\n    const scrollPosition = this.scrollPosition();\n    const index = Object.keys(this.rendered).find((i) => {\n      const renderedElement = this.rendered[i];\n      return renderedElement.offset <= scrollPosition && renderedElement.offset + this.sizeManager.getHopefulSize(renderedElement) > scrollPosition;\n    });\n    return index ? Number(index) : -1;\n  }\n\n  /**\n   * @private\n   * @param {number} i Element index\n   * @returns {HTMLElement}\n   */\n  createElement(i) {\n    const item = document.createElement('div');\n    item.setAttribute('index', String(i));\n    item.style.position = 'absolute';\n    item.style[this.horizontal ? 'height' : 'width'] = '100%';\n    item.appendChild(this.itemBuilder(i));\n    return item;\n  }\n\n  /**\n   * @private\n   * @param {HTMLElement} renderedElement\n   * @param {number} offset\n   */\n  positionElement(renderedElement, offset) {\n    renderedElement.style[this.horizontal ? 'left' : 'top'] = this.scrollbar.calc(offset) + 'px';\n    // @ts-ignore\n    renderedElement.offset = offset;\n  }\n\n  /**\n   * @public\n   * @return {number}\n   */\n  scrollPosition() {\n    return this.scrollbar.scrollPosition;\n  }\n\n  /**\n   * @public\n   * @param {number} position\n   */\n  scrollTo(position) {\n    this.scrollbar.scrollTo(position);\n  }\n\n  /**\n   * @public\n   */\n  destroy() {\n    this.scrollbar.destroy();\n    this.sizeManager = null;\n    this.rendered = null;\n    window.cancelAnimationFrame(this.syncId);\n    window.clearTimeout(this.scrollThrottlingId);\n    this.syncId = null;\n    this.scrollThrottlingId = null;\n  }\n\n  /**\n   * @public\n   * @param {number} value\n   */\n  updateItemCount(value) {\n    if (this.itemCount !== value) {\n      this.itemCount = value;\n      this.expectedTotalSize = this.itemCount * this.expectedItemSize;\n      this.scrollbar.updateTotalSize(this.expectedTotalSize);\n      this.scheduleSync();\n    }\n  }\n}\n","import { VirtualScroller } from '../lib/virtual-scroller';\n\nfunction main() {\n  const params = JSON.parse(decodeURIComponent(window.location.search.slice(1)) || '{}');\n  const count = params.itemCount || 3000000;\n  const appElement = document.getElementById('app');\n\n  if (!params.window) {\n    appElement.style.height = '80vh';\n    appElement.style.overflow = 'auto';\n  }\n\n  VirtualScroller.builder(appElement, Object.assign({\n    itemCount: count,\n    itemBuilder(it) {\n      const item = document.createElement('div');\n      item.style.padding = '8px';\n      if (params.horizontal) {\n        item.style.width = 300 + 'px';\n      }\n      item.innerHTML = it % 2 ?\n        `<b>${it + 1}</b>/${count} - Lorem Ipsum is simply dummy text` :\n        `<b>${it + 1}</b>/${count} - Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book`;\n      return item;\n    }\n  }, params));\n}\n\nmain();\n"]}